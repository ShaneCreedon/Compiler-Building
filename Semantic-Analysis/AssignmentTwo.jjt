/* Shane Creedon 
 * Student ID: 15337356
 * Module: CA4003 Compiler Construction Assignment 2
 * @David Sinclair: Please use this version of my code as my final edition.
 */

// Options for Lexer and Parser
options {
	JAVA_UNICODE_ESCAPE = true;
	IGNORE_CASE = true;

	MULTI=true;
	VISITOR=true;
	NODE_DEFAULT_VOID = true;
}

// Define Parser Scope
PARSER_BEGIN(AssignmentTwo)

	import java.io.*;
	import java.util.*;
	
	// Main class for passing in CAL code.
	class AssignmentTwo {

		public static STC ST = new STC();
		public static String scope = "global";
		
		public static void main(String[] args) throws FileNotFoundException {
			
			if(args.length < 1) {		
				System.out.println("Please pass in the filename.");
				System.exit(1);
			}
			
			try {	
				// parser initialisation
				AssignmentTwo parser = new AssignmentTwo(new FileInputStream(args[0]));

				// Build our Abstract Syntax tree (AST)
				SimpleNode root = parser.program();
				System.out.println("Abstract Syntax Tree:");
				root.dump(" ");

				// Output the symbol table of the program based off the input
				System.out.println();
				System.out.println("Symbol Table:\n"); 
				ST.print();

				// Perform Type checking & Semantic Analysis on the program.
				// If an error/warning is found, it will be reported in the terminal.
				System.out.println();
				System.out.println("Type Checking:");
				TypeCheckVisitor tc = new TypeCheckVisitor();
				root.jjtAccept(tc, ST);  			

			} catch (ParseException e) {
				System.err.println(e);
			}
		}
	}

PARSER_END(AssignmentTwo)

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

// Tokens for the parser to skip
SKIP: 
{
	< " " | "\t" | "\n" | "\r" | "\r\n" >
	| < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}

SKIP : /* COMMENTS */
{
	"/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP :
{
	"/*" { commentNesting++; }
  | "*/" { commentNesting--;
	if (commentNesting == 0)
		SwitchTo(DEFAULT);
	}
  | <~[]>
}

// Static Tokens
TOKEN:
{
	<COMMA: ",">
	| <SEMICOLON: ";">
	| <COLON: ":">
	| <ASSIGNMENT: ":=">
	| <LBRACE: "(">
	| <RBRACE: ")">
	| <PLUS: "+">
	| <MINUS: "-">
	| <NOT: "~">
	| <OR: "|" >
	| <AND: "&">
	| <EQUALS: "=">
	| <NOT_EQUALS: "!=">
	| <LESS_THAN: "<">
	| <LESS_THAN_OR_EQUAL: "<=">
	| <GREATER_THAN: ">">
	| <GREATER_THAN_OR_EQUAL: ">=">
}

// Reserved Tokens
TOKEN:
{	
	<VARIABLE: "variable">
	| <CONSTANT: "constant">
	| <RETURN: "return">
	| <INTEGER: "integer">
	| <BOOLEAN: "boolean">
	| <VOID: "void">
	| <MAIN: "main">
	| <IF: "if">
	| <ELSE: "else">
	| <TRUE: "true">
	| <FALSE: "false">
	| <WHILE: "while">
	| <BEGIN: "begin">
	| <END: "end">
	| <IS: "is">
	| <SKIP_TOKEN: "skip">
}

// Identifier Tokens                                                               
TOKEN:                                                                             
{                                                                                  
    <DIGIT: (<MINUS>)? "0" | ((<MINUS>)? ["1" - "9"] (["0" - "9"])*) >
    | <ID: <LETTER>(<LETTER>|<DIGIT>|<UNDERSCORE>)* >                              
    | <# LETTER: (["a"-"z", "A"-"Z"])+ >
    | <# UNDERSCORE: "_" >                                                         
} 

// Start production rule.
// 0 or 1 declaration lists, followed by
// 0 or 1 function lists, followed by
// our main function.
SimpleNode program() #Program: {}
{	
	// Declarations
	[DeclarationList()]

	// Functions
	[FunctionList()]

	// Main Program
	Main()
	<EOF>

	{return jjtThis;}
}

/* Declaration Rules */
// A declaration list has one or more declarations.
void DeclarationList(): 
{}
{
	(Declaration() <SEMICOLON>)+
}

/* A declaration is comprised of either:
 * 1) A Variable declaration
 * 2) A Constant declaration
 */
void Declaration():
{}
{
	VariableDeclaration() 
	| ConstantDeclaration()
}

// Variable structure construct
void VariableDeclaration() #VarDecl: {Token t; String ID; String type;}
{
	t = <VARIABLE> ID = Identifier() <COLON> type = Type()
	{
		jjtThis.value = t.image;
		ST.put(ID, type, "var", scope);
	}
}

// Constant structure construct
void ConstantDeclaration() #ConstDecl:
{Token t; String ID; String type;}
{
	t = <CONSTANT> ID = Identifier() <COLON> type = Type() <ASSIGNMENT> expression()
	{
		jjtThis.value = t.image;
		ST.put(ID, type, "const", scope);
	}
}

/* Function Rules */
// A function_list has one or more functions
void FunctionList():
{}
{
	(function() #Function) [FunctionList()]
}

// Function definition
// Takes a parameter list with 0 or more parameters.
// Takes 0 or 1 declaration lists.
// Within the function begin, we define a statement block 0 or 1 times.
// Return 0 or 1 expressions. 
void function():
{String type; String ID;}
{
	(type = Type() ID = Identifier() 
	{
		ST.put(ID, type, "function", scope);
		if(!scope.equals("global")) {
			// Add function name to the global score LinkedList.
        	ST.put(ID, type, "function", "global");
        }
		// Set new scope here for function.
     	scope = ID;
	}
	<LBRACE> parameter_list() <RBRACE> <IS>
	[DeclarationList()]
	<BEGIN>
		statement_block()
	    function_return() #FuncReturn
	<END>)
	{scope = "global";}
}

void function_return() : {Token t;}
{
    <RETURN> (<LBRACE> [expression()] <RBRACE>) <SEMICOLON> 
}

// Defines parameter list.
// Either is a non-empty parameter list or an empty one (0 or 1)
void parameter_list() #Parameter_list:
{}
{
	[nemp_parameter_list() #Parameter]
}

// Non-empty parameter list structure.
void nemp_parameter_list():
{String ID; String type;}
{
	ID = Identifier() <COLON> type = Type() [<COMMA> nemp_parameter_list() #Parameter]
	{ ST.put(ID, type, "parameter", scope); }
}

// A statement block is simply 0 or more statements.
void statement_block():
{}
{
	(statement())*
}

// Statement structure - has many possible routes.
// Skip token is used to skip the expection of anything else inside statement.
void statement() #Statement:
{Token t;}
{
	Identifier() (<ASSIGNMENT> expression() <SEMICOLON> | <LBRACE> (arg_list() #Arg_list) <RBRACE> <SEMICOLON>)
	| statement_begin_structure()
	|  (t = <IF> condition() statement_begin_structure() {jjtThis.value = t.image;})
	|  (t = <ELSE> statement_begin_structure() {jjtThis.value = t.image;})
	|  (t = <WHILE> condition() statement_begin_structure() {jjtThis.value = t.image;})
	| <SKIP_TOKEN> <SEMICOLON>
}

// Fragment definition - tied to expression definition.
// An expression can evaluate to our list of primitive tokens - 
// Minus Digit, Minus ID, Digit, True, False.
void fragment():
{Token t;}
{
    (<MINUS> Identifier() #Minus_sign)
	| t = <TRUE> {jjtThis.value = t.image;} #Boolean
	| t = <FALSE> {jjtThis.value = t.image;} #Boolean
    | Number() 
}

/* Expression can be a simple_expression() followed by 0 or 1 more
 * Arithmetic operators and an expression.
 */
void expression():
{Token t;}
{
    simple_expression() 
	[
		t = <PLUS> expression()   {jjtThis.value = t.image;} #Add_Op(2)
	| 	t = <MINUS> expression()  {jjtThis.value = t.image;} #Add_Op(2)
	]
}

/* A simple expression defines either:
 * 1) A fragment as previously defined.
 * 2) An expression with a Left parenthese and Right parenthese surrounding.
 * 3) An ID followed by 0 or 1 Left parenthese + argument list + right parenthese.
 */
void simple_expression():
{}
{
    <LBRACE> expression() <RBRACE>
    | Identifier() [<LBRACE> (arg_list() #Arg_list) <RBRACE>]
    | fragment()
}

// A condition firstly can be instantiated with either a not token (~ tilde) or not.
// Following is a simple condition with 0 or 1 logical operators followed by a condition.
// Structure is very similar to expression() above but with the NOT token.
void condition():
{Token t;}
{   
    (<NOT> simple_condition() | simple_condition())
	[    t = <AND> condition() {jjtThis.value = t.image;} #LogicalAND
  	     t = <OR> condition() {jjtThis.value = t.image;} #LogicalOR
	]
}

/* A simple condition takes a left bracket, condition, right bracket or
 * It takes a special_expression followed by 0 or 1 comparison operators and another
 * expression.
 * The special_expression is necessary for allowing the parser to have no difficulty,
 * when deciding what choice to make in our parser.
*/
void simple_condition():
{Token t;}
{   
    <LBRACE> condition() <RBRACE>
    | special_expression() 
	[	t = <EQUALS>  expression() {jjtThis.value = t.image;} #Equals
	| 	t = <NOT_EQUALS>  expression() {jjtThis.value = t.image;} #Not_Equals
	| 	t = <LESS_THAN>  expression() {jjtThis.value = t.image;} #Less_Than
	| 	t = <LESS_THAN_OR_EQUAL>  expression() {jjtThis.value = t.image;} #Less_Than_Or_Equal
	| 	t = <GREATER_THAN>  expression() {jjtThis.value = t.image;} #Greater_Than
	| 	t = <GREATER_THAN_OR_EQUAL> expression() {jjtThis.value = t.image;} #Greater_Than_Or_Equal
	] 
}

// Special Expression structure - similar to expression / condition.
void special_expression():
{Token t;}
{
    simple_special_expression() 
	[
		t = <PLUS> special_expression()   {jjtThis.value = t.image;} #Add_Op(2)
	| 	t = <MINUS> special_expression()  {jjtThis.value = t.image;} #Add_Op(2)
	]
}

// Similar to simple_expression, but without the <LBRACE> choice conflict.
void simple_special_expression():
{}
{
    Identifier() [<LBRACE> (arg_list() #Arg_list) <RBRACE>]
    | fragment()
}

// Argument list is 0 or 1 non-empty argument lists.
// Non-empty argument list, is a list of IDs with COMMAs separating them.
void arg_list():
{}
{
    [nemp_arg_list()]
}

void nemp_arg_list():
{}
{
    Identifier() [<COMMA> arg_list()]
}

// Structure to statements
void statement_begin_structure():
{}
{
	<BEGIN>
		statement_block()
	<END>
}

void Number() #Number: 
{Token t;}
{
	t = <DIGIT> {jjtThis.value = t.image;}
}

String Identifier() #Identifier:
{Token t;}
{
  t = <ID> {jjtThis.value = t.image; return t.image;}
}

// Defines the type for AST matching cases.
String Type() #Type:
{Token t;}
{
	t = <VOID>  {jjtThis.value = t.image; return t.image;}
  | t = <INTEGER>  {jjtThis.value = t.image; return t.image;}
  | t = <BOOLEAN> {jjtThis.value = t.image; return t.image;}
}

// Our main function definition.
void Main() #Main:
{}
{
	{scope = "main";}
	(
		<MAIN>
			<BEGIN> 
				[DeclarationList()] 
				(statement_block()) 
			<END>
	)
}
