/* AssignmentTwo.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AssignmentTwo.java */
 import java.io.*;
 import java.util.*;

 // Main class for passing in CAL code.
 class AssignmentTwo/*@bgen(jjtree)*/implements AssignmentTwoTreeConstants, AssignmentTwoConstants {/*@bgen(jjtree)*/
  protected static JJTAssignmentTwoState jjtree = new JJTAssignmentTwoState();
  public static STC ST = new STC();
  public static String scope = "global";

  public static void main(String[] args) throws FileNotFoundException {

   if(args.length < 1) {
    System.out.println("Please pass in the filename.");
    System.exit(1);
   }

   try {
    // parser initialisation
    AssignmentTwo parser = new AssignmentTwo(new FileInputStream(args[0]));

    SimpleNode root = parser.program();
    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println();
    System.out.println("Symbol Table:\n");
    ST.print();

    System.out.println();
    System.out.println("Type Checking:");
    TypeCheckVisitor tc = new TypeCheckVisitor();
    root.jjtAccept(tc, ST);

   } catch (ParseException e) {
    System.err.println(e);
   }
  }

// Start production rule.
// 0 or 1 declaration lists, followed by
// 0 or 1 function lists, followed by
// our main function.
  static final public SimpleNode program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE:
      case CONSTANT:{
        DeclarationList();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:{
ASTFunctionList jjtn001 = new ASTFunctionList(JJTFUNCTIONLIST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          FunctionList();
        } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      Main();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
}

/* Declaration Rules */
// A declaration list has one or more declarations.
  static final public void DeclarationList() throws ParseException {/*@bgen(jjtree) DeclarationList */
  ASTDeclarationList jjtn000 = new ASTDeclarationList(JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Declaration();
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VARIABLE:
        case CONSTANT:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

/* A declaration is comprised of either:
 * 1) A Variable declaration
 * 2) A Constant declaration
 */
  static final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:{
      VariableDeclaration();
      break;
      }
    case CONSTANT:{
      ConstantDeclaration();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Variable structure construct
  static final public void VariableDeclaration() throws ParseException {/*@bgen(jjtree) VarDecl */
                                      ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t; String ID; String type;
    try {
      t = jj_consume_token(VARIABLE);
      ID = Identifier();
      jj_consume_token(COLON);
      type = Type();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.value = t.image;
  ST.put(ID, type, "var", scope);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// Constant structure construct
  static final public void ConstantDeclaration() throws ParseException {/*@bgen(jjtree) ConstDecl */
 ASTConstDecl jjtn000 = new ASTConstDecl(JJTCONSTDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String ID; String type;
    try {
      t = jj_consume_token(CONSTANT);
      ID = Identifier();
      jj_consume_token(COLON);
      type = Type();
      jj_consume_token(ASSIGNMENT);
      expression();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.value = t.image;
  ST.put(ID, type, "const", scope);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

/* Function Rules */
// A function_list has one or more functions
  static final public void FunctionList() throws ParseException {
ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      function();
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:{
      FunctionList();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
}

// Function definition
// Takes a parameter list with 0 or more parameters.
// Takes 0 or 1 declaration lists.
// Within the function begin, we define a statement block 0 or 1 times.
// Return 0 or 1 expressions. 
  static final public void function() throws ParseException {String type; String ID;
    type = Type();
    ID = Identifier();
ST.put(ID, type, "function", scope);
  if(!scope.equals("global")) {
   // Add function name to the global score LinkedList.
         ST.put(ID, type, "function", "global");
        }
  // Set new scope here for function.
      scope = ID;
    jj_consume_token(LBRACE);
    parameter_list();
    jj_consume_token(RBRACE);
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:
    case CONSTANT:{
      DeclarationList();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
ASTStatement_block jjtn001 = new ASTStatement_block(JJTSTATEMENT_BLOCK);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      statement_block();
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
ASTReturn jjtn002 = new ASTReturn(JJTRETURN);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
    try {
      function_return();
    } catch (Throwable jjte002) {
if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte002;}
       }
       if (jjte002 instanceof ParseException) {
         {if (true) throw (ParseException)jjte002;}
       }
       {if (true) throw (Error)jjte002;}
    } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
       }
    }
    jj_consume_token(END);
scope = "global";
}

  static final public void function_return() throws ParseException {Token t;
    jj_consume_token(RETURN);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:
    case MINUS:
    case TRUE:
    case FALSE:
    case DIGIT:
    case ID:{
      expression();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    jj_consume_token(SEMICOLON);
}

// Defines parameter list.
// Either is a non-empty parameter list or an empty one (0 or 1)
  static final public void parameter_list() throws ParseException {/*@bgen(jjtree) Parameter_list */
  ASTParameter_list jjtn000 = new ASTParameter_list(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
ASTParameter jjtn001 = new ASTParameter(JJTPARAMETER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          nemp_parameter_list();
        } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// Non-empty parameter list structure.
  static final public void nemp_parameter_list() throws ParseException {String ID; String type;
    ID = Identifier();
    jj_consume_token(COLON);
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
ASTParameter jjtn001 = new ASTParameter(JJTPARAMETER);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
      try {
        nemp_parameter_list();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      {if (true) throw (RuntimeException)jjte001;}
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      {if (true) throw (ParseException)jjte001;}
                                                    }
                                                    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                    }
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
ST.put(ID, type, "parameter", scope);
}

// A statement block is simply 0 or more statements.
  static final public void statement_block() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case ELSE:
      case WHILE:
      case BEGIN:
      case SKIP_TOKEN:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      statement();
    }
}

// Statement structure - has many possible routes.
// Skip token is used to skip the expection of anything else inside statement.
  static final public void statement() throws ParseException {/*@bgen(jjtree) Statement */
 ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGNMENT:{
          assignment_structure();
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
          function_call_structure();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case BEGIN:{
        statement_begin_structure();
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
        condition();
        statement_begin_structure();
jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case ELSE:{
        t = jj_consume_token(ELSE);
        statement_begin_structure();
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
        condition();
        statement_begin_structure();
jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case SKIP_TOKEN:{
        jj_consume_token(SKIP_TOKEN);
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// Fragment definition - tied to expression definition.
// An expression can evaluate to our list of primitive tokens - 
// Minus Digit, Minus ID, Digit, True, False.
  static final public void fragment() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
ASTMinus_sign jjtn001 = new ASTMinus_sign(JJTMINUS_SIGN);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
      }
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
jjtn002.value = t.image;
      } finally {
if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
ASTBoolean jjtn003 = new ASTBoolean(JJTBOOLEAN);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                 jjtc003 = false;
jjtn003.value = t.image;
      } finally {
if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                 }
      }
      break;
      }
    case DIGIT:{
      Number();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* Expression can be a simple_expression() followed by 0 or 1 more
 * Arithmetic operators and an expression.
 */
  static final public void expression() throws ParseException {/*@bgen(jjtree) Exp */
 ASTExp jjtn000 = new ASTExp(JJTEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      simple_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          t = jj_consume_token(PLUS);
          expression();
ASTAdd_Op jjtn001 = new ASTAdd_Op(JJTADD_OP);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
jjtn001.value = t.image;
          } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
          }
          break;
          }
        case MINUS:{
          t = jj_consume_token(MINUS);
          expression();
ASTAdd_Op jjtn002 = new ASTAdd_Op(JJTADD_OP);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002,  2);
                                jjtc002 = false;
jjtn002.value = t.image;
          } finally {
if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
          }
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/* A simple expression defines either:
 * 1) A fragment as previously defined.
 * 2) An expression with a Left parenthese and Right parenthese surrounding.
 * 3) An ID followed by 0 or 1 Left parenthese + argument list + right parenthese.
 */
  static final public void simple_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      expression();
      jj_consume_token(RBRACE);
      break;
      }
    case ID:{
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        arg_list();
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    case MINUS:
    case TRUE:
    case FALSE:
    case DIGIT:{
      fragment();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// A condition firstly can be instantiated with either a not token (~ tilde) or not.
// Following is a simple condition with 0 or 1 logical operators followed by a condition.
// Structure is very similar to expression() above but with the NOT token.
  static final public void condition() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      simple_condition();
      break;
      }
    case LBRACE:
    case MINUS:
    case TRUE:
    case FALSE:
    case DIGIT:
    case ID:{
      simple_condition();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:
    case AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        t = jj_consume_token(AND);
        condition();
ASTLogical_Conjunction jjtn001 = new ASTLogical_Conjunction(JJTLOGICAL_CONJUNCTION);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
jjtn001.value = t.image;
        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
        }
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
        condition();
ASTLogical_Disjunction jjtn002 = new ASTLogical_Disjunction(JJTLOGICAL_DISJUNCTION);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
                             jjtc002 = false;
jjtn002.value = t.image;
        } finally {
if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  2);
                             }
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
}

/* A simple condition takes a left bracket, condition, right bracket or
 * It takes a special_expression followed by 0 or 1 comparison operators and another
 * expression.
 * The special_expression is necessary for allowing the parser to have no difficulty,
 * when deciding what choice to make in our parser.
*/
  static final public void simple_condition() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      condition();
      jj_consume_token(RBRACE);
      break;
      }
    case MINUS:
    case TRUE:
    case FALSE:
    case DIGIT:
    case ID:{
      special_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:
      case NOT_EQUALS:
      case LESS_THAN:
      case LESS_THAN_OR_EQUAL:
      case GREATER_THAN:
      case GREATER_THAN_OR_EQUAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUALS:{
          t = jj_consume_token(EQUALS);
          expression();
ASTEquals jjtn001 = new ASTEquals(JJTEQUALS);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
jjtn001.value = t.image;
          } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
          }
          break;
          }
        case NOT_EQUALS:{
          t = jj_consume_token(NOT_EQUALS);
          expression();
ASTNot_Equals jjtn002 = new ASTNot_Equals(JJTNOT_EQUALS);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002,  2);
                                     jjtc002 = false;
jjtn002.value = t.image;
          } finally {
if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  2);
                                     }
          }
          break;
          }
        case LESS_THAN:{
          t = jj_consume_token(LESS_THAN);
          expression();
ASTLess_Than jjtn003 = new ASTLess_Than(JJTLESS_THAN);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003,  2);
                                    jjtc003 = false;
jjtn003.value = t.image;
          } finally {
if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003,  2);
                                    }
          }
          break;
          }
        case LESS_THAN_OR_EQUAL:{
          t = jj_consume_token(LESS_THAN_OR_EQUAL);
          expression();
ASTLess_Than_Or_Equal jjtn004 = new ASTLess_Than_Or_Equal(JJTLESS_THAN_OR_EQUAL);
                                             boolean jjtc004 = true;
                                             jjtree.openNodeScope(jjtn004);
          try {
jjtree.closeNodeScope(jjtn004,  2);
                                             jjtc004 = false;
jjtn004.value = t.image;
          } finally {
if (jjtc004) {
                                               jjtree.closeNodeScope(jjtn004,  2);
                                             }
          }
          break;
          }
        case GREATER_THAN:{
          t = jj_consume_token(GREATER_THAN);
          expression();
ASTGreater_Than jjtn005 = new ASTGreater_Than(JJTGREATER_THAN);
                                       boolean jjtc005 = true;
                                       jjtree.openNodeScope(jjtn005);
          try {
jjtree.closeNodeScope(jjtn005,  2);
                                       jjtc005 = false;
jjtn005.value = t.image;
          } finally {
if (jjtc005) {
                                         jjtree.closeNodeScope(jjtn005,  2);
                                       }
          }
          break;
          }
        case GREATER_THAN_OR_EQUAL:{
          t = jj_consume_token(GREATER_THAN_OR_EQUAL);
          expression();
ASTGreater_Than_Or_Equal jjtn006 = new ASTGreater_Than_Or_Equal(JJTGREATER_THAN_OR_EQUAL);
                                               boolean jjtc006 = true;
                                               jjtree.openNodeScope(jjtn006);
          try {
jjtree.closeNodeScope(jjtn006,  2);
                                               jjtc006 = false;
jjtn006.value = t.image;
          } finally {
if (jjtc006) {
                                                 jjtree.closeNodeScope(jjtn006,  2);
                                               }
          }
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Special Expression structure - similar to expression / condition.
  static final public void special_expression() throws ParseException {Token t;
    simple_special_expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        special_expression();
ASTAdd_Op jjtn001 = new ASTAdd_Op(JJTADD_OP);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
jjtn001.value = t.image;
        } finally {
if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
        }
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        special_expression();
ASTAdd_Op jjtn002 = new ASTAdd_Op(JJTADD_OP);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
                                        jjtc002 = false;
jjtn002.value = t.image;
        } finally {
if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
}

// Similar to simple_expression, but without the <LBRACE> choice conflict.
  static final public void simple_special_expression() throws ParseException {/*@bgen(jjtree) Exp */
  ASTExp jjtn000 = new ASTExp(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:{
          jj_consume_token(LBRACE);
          arg_list();
          jj_consume_token(RBRACE);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        break;
        }
      case MINUS:
      case TRUE:
      case FALSE:
      case DIGIT:{
        fragment();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

// Argument list is 0 or 1 non-empty argument lists.
// Non-empty argument list, is a list of IDs with COMMAs separating them.
  static final public void arg_list() throws ParseException {/*@bgen(jjtree) Arg_list */
  ASTArg_list jjtn000 = new ASTArg_list(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
ASTNemp_arg_list jjtn001 = new ASTNemp_arg_list(JJTNEMP_ARG_LIST);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
        try {
          nemp_arg_list();
        } catch (Throwable jjte001) {
if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void nemp_arg_list() throws ParseException {
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      arg_list();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
}

// Structure to assignments 
  static final public void assignment_structure() throws ParseException {
    jj_consume_token(ASSIGNMENT);
    expression();
    jj_consume_token(SEMICOLON);
}

// Structure to function calls
  static final public void function_call_structure() throws ParseException {/*@bgen(jjtree) Function_call_structure */
  ASTFunction_call_structure jjtn000 = new ASTFunction_call_structure(JJTFUNCTION_CALL_STRUCTURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      arg_list();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// Structure to statements
  static final public void statement_begin_structure() throws ParseException {/*@bgen(jjtree) Statement_Begin_Structure */
  ASTStatement_Begin_Structure jjtn000 = new ASTStatement_Begin_Structure(JJTSTATEMENT_BEGIN_STRUCTURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  static final public void Number() throws ParseException {/*@bgen(jjtree) Number */
 ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIGIT);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  static final public String Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

// Defines the type for AST matching.
  static final public String Type() throws ParseException {/*@bgen(jjtree) Type */
 ASTType jjtn000 = new ASTType(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        t = jj_consume_token(VOID);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
}

// Our main function definition.
  static final public void Main() throws ParseException {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
scope = "main";
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE:
      case CONSTANT:{
        DeclarationList();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
ASTStatement_block jjtn001 = new ASTStatement_block(JJTSTATEMENT_BLOCK);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        statement_block();
      } catch (Throwable jjte001) {
if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AssignmentTwoTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x600000,0x7000000,0x600000,0x600000,0x7000000,0x600000,0xc0000900,0x0,0x10,0x30000000,0x180,0x30000000,0xc0000800,0xc00,0xc00,0x100,0xc0000900,0xc0001900,0x6000,0x6000,0x1f8000,0x1f8000,0xc0000900,0xc00,0xc00,0x100,0xc0000800,0x0,0x10,0x7000000,0x600000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x40,0x0,0x53,0x0,0x53,0x20,0x0,0x0,0x0,0x60,0x60,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x60,0x40,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public AssignmentTwo(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AssignmentTwo(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AssignmentTwoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AssignmentTwo(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new AssignmentTwoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AssignmentTwoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AssignmentTwo(AssignmentTwoTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTwoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[41];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 41; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 }
